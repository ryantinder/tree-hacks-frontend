// Generated by @wagmi/cli@0.1.5 on 2/14/2023 at 12:22:43 AM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'addedValue', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'subtractedValue', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'tokenId', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'operator', type: 'address', indexed: true },
      { name: 'approved', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'tokenId', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'tokenId', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'operator', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', type: 'address' },
      { name: 'to', type: 'address' },
      { name: 'tokenId', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', type: 'address' },
      { name: 'to', type: 'address' },
      { name: 'id', type: 'uint256' },
      { name: 'data', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', type: 'address' },
      { name: 'approved', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'tokenByIndex',
    outputs: [{ name: 'tokenId', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'tokenId', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC4626
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc4626ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', type: 'address', indexed: true },
      { name: 'receiver', type: 'address', indexed: true },
      { name: 'assets', type: 'uint256', indexed: false },
      { name: 'shares', type: 'uint256', indexed: false },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', type: 'address', indexed: true },
      { name: 'receiver', type: 'address', indexed: true },
      { name: 'owner', type: 'address', indexed: true },
      { name: 'assets', type: 'uint256', indexed: false },
      { name: 'shares', type: 'uint256', indexed: false },
    ],
    name: 'Withdraw',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'asset',
    outputs: [{ name: 'assetTokenAddress', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'shares', type: 'uint256' }],
    name: 'convertToAssets',
    outputs: [{ name: 'assets', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'assets', type: 'uint256' }],
    name: 'convertToShares',
    outputs: [{ name: 'shares', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'assets', type: 'uint256' },
      { name: 'receiver', type: 'address' },
    ],
    name: 'deposit',
    outputs: [{ name: 'shares', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'caller', type: 'address' }],
    name: 'maxDeposit',
    outputs: [{ name: 'maxAssets', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'caller', type: 'address' }],
    name: 'maxMint',
    outputs: [{ name: 'maxShares', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', type: 'address' }],
    name: 'maxRedeem',
    outputs: [{ name: 'maxShares', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', type: 'address' }],
    name: 'maxWithdraw',
    outputs: [{ name: 'maxAssets', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'shares', type: 'uint256' },
      { name: 'receiver', type: 'address' },
    ],
    name: 'mint',
    outputs: [{ name: 'assets', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'assets', type: 'uint256' }],
    name: 'previewDeposit',
    outputs: [{ name: 'shares', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'shares', type: 'uint256' }],
    name: 'previewMint',
    outputs: [{ name: 'assets', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'shares', type: 'uint256' }],
    name: 'previewRedeem',
    outputs: [{ name: 'assets', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'assets', type: 'uint256' }],
    name: 'previewWithdraw',
    outputs: [{ name: 'shares', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'shares', type: 'uint256' },
      { name: 'receiver', type: 'address' },
      { name: 'owner', type: 'address' },
    ],
    name: 'redeem',
    outputs: [{ name: 'assets', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalAssets',
    outputs: [{ name: 'totalManagedAssets', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', type: 'address' },
      { name: 'to', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'assets', type: 'uint256' },
      { name: 'receiver', type: 'address' },
      { name: 'owner', type: 'address' },
    ],
    name: 'withdraw',
    outputs: [{ name: 'shares', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// resonate
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const resonateABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_router', internalType: 'address', type: 'address' },
      {
        name: '_proxyOutputReceiver',
        internalType: 'address',
        type: 'address',
      },
      { name: '_proxyAddressLock', internalType: 'address', type: 'address' },
      { name: '_resonateHelper', internalType: 'address', type: 'address' },
      {
        name: '_smartWalletWhitelist',
        internalType: 'address',
        type: 'address',
      },
      { name: '_priceProvider', internalType: 'address', type: 'address' },
      { name: '_dev_address', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'fnftIds',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'claimer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountInterest',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BatchInterestClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'numPackets',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'principalFNFT',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'CapitalActivated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'mintTo',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountTokens',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fnftId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'extraData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'DepositERC20OutputReceiver',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'dequeuer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'position',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'order',
        internalType: 'struct IResonate.Order',
        type: 'tuple',
        components: [
          {
            name: 'packetsRemaining',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'depositedShares', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'bytes32', type: 'bytes32' },
        ],
        indexed: false,
      },
    ],
    name: 'DequeueConsumer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'dequeuer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'position',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'order',
        internalType: 'struct IResonate.Order',
        type: 'tuple',
        components: [
          {
            name: 'packetsRemaining',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'depositedShares', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'bytes32', type: 'bytes32' },
        ],
        indexed: false,
      },
    ],
    name: 'DequeueProvider',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'addr', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'position',
        internalType: 'uint64',
        type: 'uint64',
        indexed: true,
      },
      {
        name: 'shouldFarm',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'order',
        internalType: 'struct IResonate.Order',
        type: 'tuple',
        components: [
          {
            name: 'packetsRemaining',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'depositedShares', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'bytes32', type: 'bytes32' },
        ],
        indexed: false,
      },
    ],
    name: 'EnqueueConsumer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'addr', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'position',
        internalType: 'uint64',
        type: 'uint64',
        indexed: true,
      },
      {
        name: 'shouldFarm',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'order',
        internalType: 'struct IResonate.Order',
        type: 'tuple',
        components: [
          {
            name: 'packetsRemaining',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'depositedShares', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'bytes32', type: 'bytes32' },
        ],
        indexed: false,
      },
    ],
    name: 'EnqueueProvider',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'isPrincipal',
        internalType: 'bool',
        type: 'bool',
        indexed: true,
      },
      {
        name: 'fnftId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'quantityFNFTs',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FNFTCreation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'isPrincipal',
        internalType: 'bool',
        type: 'bool',
        indexed: true,
      },
      {
        name: 'fnftId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'quantityFNFTs',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FNFTRedeemed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'amountTokens',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FeeCollection',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'fnftId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'claimer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'InterestClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'vaultAsset',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'paymentAsset',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'oracleDispatch',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OracleRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'amountPackets',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fullyWithdrawn',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderWithdrawal',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'asset',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'vault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'payoutAsset',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'rate',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'addInterestRate',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'lockupPeriod',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'packetSize',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'isFixedTerm',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'poolName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'creator',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'underlyingVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'vaultAdapter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'vaultAsset',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'VaultAdapterRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountTokens',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fnftId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'extraData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'WithdrawERC20OutputReceiver',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PROXY_ADDRESS_LOCK',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PROXY_OUTPUT_RECEIVER',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'REGISTRY_ADDRESS',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RESONATE_HELPER',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'activated',
    outputs: [
      { name: 'principalId', internalType: 'uint256', type: 'uint256' },
      { name: 'sharesPerPacket', internalType: 'uint256', type: 'uint256' },
      {
        name: 'startingSharesPerPacket',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fnftIds', internalType: 'uint256[][]', type: 'uint256[][]' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'batchClaimInterest',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fnftId', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'claimInterest',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'consumerQueue',
    outputs: [
      { name: 'packetsRemaining', internalType: 'uint256', type: 'uint256' },
      { name: 'depositedShares', internalType: 'uint256', type: 'uint256' },
      { name: 'owner', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'asset', internalType: 'address', type: 'address' },
      { name: 'vault', internalType: 'address', type: 'address' },
      { name: 'rate', internalType: 'uint128', type: 'uint128' },
      { name: 'additionalRate', internalType: 'uint128', type: 'uint128' },
      { name: 'lockupPeriod', internalType: 'uint32', type: 'uint32' },
      { name: 'packetSize', internalType: 'uint256', type: 'uint256' },
      { name: 'poolName', internalType: 'string', type: 'string' },
    ],
    name: 'createPool',
    outputs: [{ name: 'poolId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'fnftIdToIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amount', internalType: 'uint112', type: 'uint112' },
      { name: 'position', internalType: 'uint64', type: 'uint64' },
      { name: 'isProvider', internalType: 'bool', type: 'bool' },
    ],
    name: 'modifyExistingOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'vault', internalType: 'address', type: 'address' },
      { name: 'adapter', internalType: 'address', type: 'address' },
    ],
    name: 'modifyVaultAdapter',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'pools',
    outputs: [
      { name: 'asset', internalType: 'address', type: 'address' },
      { name: 'vault', internalType: 'address', type: 'address' },
      { name: 'adapter', internalType: 'address', type: 'address' },
      { name: 'lockupPeriod', internalType: 'uint32', type: 'uint32' },
      { name: 'rate', internalType: 'uint128', type: 'uint128' },
      { name: 'addInterestRate', internalType: 'uint128', type: 'uint128' },
      { name: 'packetSize', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'providerQueue',
    outputs: [
      { name: 'packetsRemaining', internalType: 'uint256', type: 'uint256' },
      { name: 'depositedShares', internalType: 'uint256', type: 'uint256' },
      { name: 'owner', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'queueMarkers',
    outputs: [
      { name: 'providerHead', internalType: 'uint64', type: 'uint64' },
      { name: 'providerTail', internalType: 'uint64', type: 'uint64' },
      { name: 'consumerHead', internalType: 'uint64', type: 'uint64' },
      { name: 'consumerTail', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fnftId', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' },
      { name: 'tokenHolder', internalType: 'address payable', type: 'address' },
      { name: 'quantity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'receiveRevestOutput',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'residuals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'shouldFarm', internalType: 'bool', type: 'bool' },
    ],
    name: 'submitConsumer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'shouldFarm', internalType: 'bool', type: 'bool' },
    ],
    name: 'submitProducer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'vaultAdapters',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

export const resonateAddress =
  '0x80CA847618030Bc3e26aD2c444FD007279DaF50A' as const

export const resonateConfig = {
  address: resonateAddress,
  abi: resonateABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// weth
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const wethABI = [
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'guy', type: 'address' },
      { name: 'wad', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'src', type: 'address' },
      { name: 'dst', type: 'address' },
      { name: 'wad', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'wad', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint8' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dst', type: 'address' },
      { name: 'wad', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'deposit',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', type: 'address' },
      { name: '', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', type: 'uint256' }],
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'src', type: 'address', indexed: true },
      { name: 'guy', type: 'address', indexed: true },
      { name: 'wad', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'src', type: 'address', indexed: true },
      { name: 'dst', type: 'address', indexed: true },
      { name: 'wad', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'dst', type: 'address', indexed: true },
      { name: 'wad', type: 'uint256', indexed: false },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'src', type: 'address', indexed: true },
      { name: 'wad', type: 'uint256', indexed: false },
    ],
    name: 'Withdrawal',
  },
] as const

export const wethAddress = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2' as const

export const wethConfig = { address: wethAddress, abi: wethABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// priceProvider
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const priceProviderABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'oracle',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetTokenOracle',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'getCurrentPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'getSafePrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'quote', internalType: 'address', type: 'address' },
    ],
    name: 'getValueOfAsset',
    outputs: [{ name: 'safePrice', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'quote', internalType: 'address', type: 'address' },
    ],
    name: 'pairHasOracle',
    outputs: [{ name: 'hasOracle', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'priceOracle',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'oracle', internalType: 'address', type: 'address' },
    ],
    name: 'setTokenOracle',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'tokenHasOracle',
    outputs: [{ name: 'hasOracle', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'updateSafePrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const priceProviderAddress =
  '0x0F89ba3F140Ea9370aB05d434B8e32fDf41a6093' as const

export const priceProviderConfig = {
  address: priceProviderAddress,
  abi: priceProviderABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc721TokenByIndex(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'tokenByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'tokenByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721TotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({
    abi: erc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'approve'>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'safeTransferFrom'>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'setApprovalForAll'>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'transferFrom'>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc4626ABI}__.
 */
export function useErc4626(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc4626ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__.
 */
export function useErc4626Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc4626Allowance(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'allowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'allowance'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"asset"`.
 */
export function useErc4626Asset(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'asset'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'asset',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'asset'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc4626BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"convertToAssets"`.
 */
export function useErc4626ConvertToAssets(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'convertToAssets'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'convertToAssets',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'convertToAssets'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"convertToShares"`.
 */
export function useErc4626ConvertToShares(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'convertToShares'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'convertToShares',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'convertToShares'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"maxDeposit"`.
 */
export function useErc4626MaxDeposit(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'maxDeposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'maxDeposit',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'maxDeposit'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"maxMint"`.
 */
export function useErc4626MaxMint(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'maxMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'maxMint',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'maxMint'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"maxRedeem"`.
 */
export function useErc4626MaxRedeem(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'maxRedeem'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'maxRedeem',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'maxRedeem'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"maxWithdraw"`.
 */
export function useErc4626MaxWithdraw(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'maxWithdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'maxWithdraw',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'maxWithdraw'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"previewDeposit"`.
 */
export function useErc4626PreviewDeposit(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'previewDeposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'previewDeposit',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'previewDeposit'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"previewMint"`.
 */
export function useErc4626PreviewMint(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'previewMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'previewMint',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'previewMint'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"previewRedeem"`.
 */
export function useErc4626PreviewRedeem(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'previewRedeem'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'previewRedeem',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'previewRedeem'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"previewWithdraw"`.
 */
export function useErc4626PreviewWithdraw(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'previewWithdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'previewWithdraw',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'previewWithdraw'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"totalAssets"`.
 */
export function useErc4626TotalAssets(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'totalAssets'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'totalAssets',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'totalAssets'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc4626TotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc4626ABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc4626ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc4626ABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__.
 */
export function useErc4626Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc4626ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, TFunctionName>({
    abi: erc4626ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc4626Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, 'approve'>({
    abi: erc4626ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"deposit"`.
 */
export function useErc4626Deposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, 'deposit'>({
    abi: erc4626ABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"mint"`.
 */
export function useErc4626Mint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, 'mint'>({
    abi: erc4626ABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"redeem"`.
 */
export function useErc4626Redeem<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, 'redeem'>['abi'],
        'redeem'
      > & { functionName?: 'redeem' }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, 'redeem'> & {
        abi?: never
        functionName?: 'redeem'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, 'redeem'>({
    abi: erc4626ABI,
    functionName: 'redeem',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc4626Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, 'transfer'>({
    abi: erc4626ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc4626TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, 'transferFrom'>({
    abi: erc4626ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"withdraw"`.
 */
export function useErc4626Withdraw<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc4626ABI, 'withdraw'>['abi'],
        'withdraw'
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<TMode, typeof erc4626ABI, 'withdraw'> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc4626ABI, 'withdraw'>({
    abi: erc4626ABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__.
 */
export function usePrepareErc4626Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc4626Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareErc4626Deposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareErc4626Mint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"redeem"`.
 */
export function usePrepareErc4626Redeem(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, 'redeem'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: 'redeem',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, 'redeem'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc4626Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc4626TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc4626ABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareErc4626Withdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc4626ABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc4626ABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc4626ABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc4626ABI}__.
 */
export function useErc4626Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc4626ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc4626ABI,
    ...config,
  } as UseContractEventConfig<typeof erc4626ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc4626ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc4626ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc4626ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc4626ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc4626ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc4626ABI}__ and `eventName` set to `"Deposit"`.
 */
export function useErc4626DepositEvent(
  config: Omit<
    UseContractEventConfig<typeof erc4626ABI, 'Deposit'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc4626ABI,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof erc4626ABI, 'Deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc4626ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc4626TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc4626ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc4626ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc4626ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc4626ABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useErc4626WithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof erc4626ABI, 'Withdraw'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc4626ABI,
    eventName: 'Withdraw',
    ...config,
  } as UseContractEventConfig<typeof erc4626ABI, 'Withdraw'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link resonateABI}__.
 */
export function useResonate(
  config: Omit<UseContractConfig, 'abi' | 'address'> = {} as any,
) {
  return useContract({ abi: resonateABI, address: resonateAddress, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__.
 */
export function useResonateRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    ...config,
  } as UseContractReadConfig<typeof resonateABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"PROXY_ADDRESS_LOCK"`.
 */
export function useResonateProxyAddressLock(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, 'PROXY_ADDRESS_LOCK'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'PROXY_ADDRESS_LOCK',
    ...config,
  } as UseContractReadConfig<typeof resonateABI, 'PROXY_ADDRESS_LOCK'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"PROXY_OUTPUT_RECEIVER"`.
 */
export function useResonateProxyOutputReceiver(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, 'PROXY_OUTPUT_RECEIVER'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'PROXY_OUTPUT_RECEIVER',
    ...config,
  } as UseContractReadConfig<typeof resonateABI, 'PROXY_OUTPUT_RECEIVER'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"REGISTRY_ADDRESS"`.
 */
export function useResonateRegistryAddress(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, 'REGISTRY_ADDRESS'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'REGISTRY_ADDRESS',
    ...config,
  } as UseContractReadConfig<typeof resonateABI, 'REGISTRY_ADDRESS'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"RESONATE_HELPER"`.
 */
export function useResonateResonateHelper(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, 'RESONATE_HELPER'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'RESONATE_HELPER',
    ...config,
  } as UseContractReadConfig<typeof resonateABI, 'RESONATE_HELPER'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"activated"`.
 */
export function useResonateActivated(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, 'activated'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'activated',
    ...config,
  } as UseContractReadConfig<typeof resonateABI, 'activated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"consumerQueue"`.
 */
export function useResonateConsumerQueue(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, 'consumerQueue'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'consumerQueue',
    ...config,
  } as UseContractReadConfig<typeof resonateABI, 'consumerQueue'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"fnftIdToIndex"`.
 */
export function useResonateFnftIdToIndex(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, 'fnftIdToIndex'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'fnftIdToIndex',
    ...config,
  } as UseContractReadConfig<typeof resonateABI, 'fnftIdToIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"owner"`.
 */
export function useResonateOwner(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, 'owner'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof resonateABI, 'owner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"pools"`.
 */
export function useResonatePools(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, 'pools'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'pools',
    ...config,
  } as UseContractReadConfig<typeof resonateABI, 'pools'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"providerQueue"`.
 */
export function useResonateProviderQueue(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, 'providerQueue'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'providerQueue',
    ...config,
  } as UseContractReadConfig<typeof resonateABI, 'providerQueue'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"queueMarkers"`.
 */
export function useResonateQueueMarkers(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, 'queueMarkers'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'queueMarkers',
    ...config,
  } as UseContractReadConfig<typeof resonateABI, 'queueMarkers'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"residuals"`.
 */
export function useResonateResiduals(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, 'residuals'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'residuals',
    ...config,
  } as UseContractReadConfig<typeof resonateABI, 'residuals'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"vaultAdapters"`.
 */
export function useResonateVaultAdapters(
  config: Omit<
    UseContractReadConfig<typeof resonateABI, 'vaultAdapters'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'vaultAdapters',
    ...config,
  } as UseContractReadConfig<typeof resonateABI, 'vaultAdapters'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resonateABI}__.
 */
export function useResonateWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof resonateABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof resonateABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof resonateABI, TFunctionName>({
    abi: resonateABI,
    address: resonateAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"batchClaimInterest"`.
 */
export function useResonateBatchClaimInterest<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof resonateABI,
          'batchClaimInterest'
        >['abi'],
        'batchClaimInterest'
      > & { functionName?: 'batchClaimInterest' }
    : UseContractWriteConfig<
        TMode,
        typeof resonateABI,
        'batchClaimInterest'
      > & {
        abi?: never
        functionName?: 'batchClaimInterest'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof resonateABI, 'batchClaimInterest'>({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'batchClaimInterest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"claimInterest"`.
 */
export function useResonateClaimInterest<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof resonateABI, 'claimInterest'>['abi'],
        'claimInterest'
      > & { functionName?: 'claimInterest' }
    : UseContractWriteConfig<TMode, typeof resonateABI, 'claimInterest'> & {
        abi?: never
        functionName?: 'claimInterest'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof resonateABI, 'claimInterest'>({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'claimInterest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"createPool"`.
 */
export function useResonateCreatePool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof resonateABI, 'createPool'>['abi'],
        'createPool'
      > & { functionName?: 'createPool' }
    : UseContractWriteConfig<TMode, typeof resonateABI, 'createPool'> & {
        abi?: never
        functionName?: 'createPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof resonateABI, 'createPool'>({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'createPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"modifyExistingOrder"`.
 */
export function useResonateModifyExistingOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof resonateABI,
          'modifyExistingOrder'
        >['abi'],
        'modifyExistingOrder'
      > & { functionName?: 'modifyExistingOrder' }
    : UseContractWriteConfig<
        TMode,
        typeof resonateABI,
        'modifyExistingOrder'
      > & {
        abi?: never
        functionName?: 'modifyExistingOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof resonateABI, 'modifyExistingOrder'>({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'modifyExistingOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"modifyVaultAdapter"`.
 */
export function useResonateModifyVaultAdapter<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof resonateABI,
          'modifyVaultAdapter'
        >['abi'],
        'modifyVaultAdapter'
      > & { functionName?: 'modifyVaultAdapter' }
    : UseContractWriteConfig<
        TMode,
        typeof resonateABI,
        'modifyVaultAdapter'
      > & {
        abi?: never
        functionName?: 'modifyVaultAdapter'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof resonateABI, 'modifyVaultAdapter'>({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'modifyVaultAdapter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"receiveRevestOutput"`.
 */
export function useResonateReceiveRevestOutput<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof resonateABI,
          'receiveRevestOutput'
        >['abi'],
        'receiveRevestOutput'
      > & { functionName?: 'receiveRevestOutput' }
    : UseContractWriteConfig<
        TMode,
        typeof resonateABI,
        'receiveRevestOutput'
      > & {
        abi?: never
        functionName?: 'receiveRevestOutput'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof resonateABI, 'receiveRevestOutput'>({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'receiveRevestOutput',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"submitConsumer"`.
 */
export function useResonateSubmitConsumer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof resonateABI, 'submitConsumer'>['abi'],
        'submitConsumer'
      > & { functionName?: 'submitConsumer' }
    : UseContractWriteConfig<TMode, typeof resonateABI, 'submitConsumer'> & {
        abi?: never
        functionName?: 'submitConsumer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof resonateABI, 'submitConsumer'>({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'submitConsumer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"submitProducer"`.
 */
export function useResonateSubmitProducer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof resonateABI, 'submitProducer'>['abi'],
        'submitProducer'
      > & { functionName?: 'submitProducer' }
    : UseContractWriteConfig<TMode, typeof resonateABI, 'submitProducer'> & {
        abi?: never
        functionName?: 'submitProducer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof resonateABI, 'submitProducer'>({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'submitProducer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useResonateTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof resonateABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof resonateABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof resonateABI, 'transferOwnership'>({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resonateABI}__.
 */
export function usePrepareResonateWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resonateABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resonateABI,
    address: resonateAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof resonateABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"batchClaimInterest"`.
 */
export function usePrepareResonateBatchClaimInterest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resonateABI, 'batchClaimInterest'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'batchClaimInterest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resonateABI, 'batchClaimInterest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"claimInterest"`.
 */
export function usePrepareResonateClaimInterest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resonateABI, 'claimInterest'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'claimInterest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resonateABI, 'claimInterest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"createPool"`.
 */
export function usePrepareResonateCreatePool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resonateABI, 'createPool'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'createPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resonateABI, 'createPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"modifyExistingOrder"`.
 */
export function usePrepareResonateModifyExistingOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resonateABI, 'modifyExistingOrder'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'modifyExistingOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resonateABI, 'modifyExistingOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"modifyVaultAdapter"`.
 */
export function usePrepareResonateModifyVaultAdapter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resonateABI, 'modifyVaultAdapter'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'modifyVaultAdapter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resonateABI, 'modifyVaultAdapter'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"receiveRevestOutput"`.
 */
export function usePrepareResonateReceiveRevestOutput(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resonateABI, 'receiveRevestOutput'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'receiveRevestOutput',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resonateABI, 'receiveRevestOutput'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"submitConsumer"`.
 */
export function usePrepareResonateSubmitConsumer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resonateABI, 'submitConsumer'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'submitConsumer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resonateABI, 'submitConsumer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"submitProducer"`.
 */
export function usePrepareResonateSubmitProducer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resonateABI, 'submitProducer'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'submitProducer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resonateABI, 'submitProducer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link resonateABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareResonateTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof resonateABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: resonateABI,
    address: resonateAddress,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof resonateABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__.
 */
export function useResonateEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    ...config,
  } as UseContractEventConfig<typeof resonateABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"BatchInterestClaimed"`.
 */
export function useResonateBatchInterestClaimedEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'BatchInterestClaimed'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'BatchInterestClaimed',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'BatchInterestClaimed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"CapitalActivated"`.
 */
export function useResonateCapitalActivatedEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'CapitalActivated'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'CapitalActivated',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'CapitalActivated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"DepositERC20OutputReceiver"`.
 */
export function useResonateDepositErc20OutputReceiverEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'DepositERC20OutputReceiver'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'DepositERC20OutputReceiver',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'DepositERC20OutputReceiver'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"DequeueConsumer"`.
 */
export function useResonateDequeueConsumerEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'DequeueConsumer'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'DequeueConsumer',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'DequeueConsumer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"DequeueProvider"`.
 */
export function useResonateDequeueProviderEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'DequeueProvider'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'DequeueProvider',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'DequeueProvider'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"EnqueueConsumer"`.
 */
export function useResonateEnqueueConsumerEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'EnqueueConsumer'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'EnqueueConsumer',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'EnqueueConsumer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"EnqueueProvider"`.
 */
export function useResonateEnqueueProviderEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'EnqueueProvider'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'EnqueueProvider',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'EnqueueProvider'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"FNFTCreation"`.
 */
export function useResonateFnftCreationEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'FNFTCreation'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'FNFTCreation',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'FNFTCreation'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"FNFTRedeemed"`.
 */
export function useResonateFnftRedeemedEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'FNFTRedeemed'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'FNFTRedeemed',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'FNFTRedeemed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"FeeCollection"`.
 */
export function useResonateFeeCollectionEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'FeeCollection'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'FeeCollection',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'FeeCollection'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"InterestClaimed"`.
 */
export function useResonateInterestClaimedEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'InterestClaimed'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'InterestClaimed',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'InterestClaimed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"OracleRegistered"`.
 */
export function useResonateOracleRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'OracleRegistered'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'OracleRegistered',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'OracleRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"OrderWithdrawal"`.
 */
export function useResonateOrderWithdrawalEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'OrderWithdrawal'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'OrderWithdrawal',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'OrderWithdrawal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useResonateOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"PoolCreated"`.
 */
export function useResonatePoolCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'PoolCreated'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'PoolCreated',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'PoolCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"VaultAdapterRegistered"`.
 */
export function useResonateVaultAdapterRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'VaultAdapterRegistered'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'VaultAdapterRegistered',
    ...config,
  } as UseContractEventConfig<typeof resonateABI, 'VaultAdapterRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link resonateABI}__ and `eventName` set to `"WithdrawERC20OutputReceiver"`.
 */
export function useResonateWithdrawErc20OutputReceiverEvent(
  config: Omit<
    UseContractEventConfig<typeof resonateABI, 'WithdrawERC20OutputReceiver'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: resonateABI,
    address: resonateAddress,
    eventName: 'WithdrawERC20OutputReceiver',
    ...config,
  } as UseContractEventConfig<
    typeof resonateABI,
    'WithdrawERC20OutputReceiver'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link wethABI}__.
 */
export function useWeth(
  config: Omit<UseContractConfig, 'abi' | 'address'> = {} as any,
) {
  return useContract({ abi: wethABI, address: wethAddress, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wethABI}__.
 */
export function useWethRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof wethABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: wethABI,
    address: wethAddress,
    ...config,
  } as UseContractReadConfig<typeof wethABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"name"`.
 */
export function useWethName(
  config: Omit<
    UseContractReadConfig<typeof wethABI, 'name'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wethABI,
    address: wethAddress,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof wethABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useWethTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof wethABI, 'totalSupply'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wethABI,
    address: wethAddress,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof wethABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"decimals"`.
 */
export function useWethDecimals(
  config: Omit<
    UseContractReadConfig<typeof wethABI, 'decimals'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wethABI,
    address: wethAddress,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof wethABI, 'decimals'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useWethBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof wethABI, 'balanceOf'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wethABI,
    address: wethAddress,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof wethABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"symbol"`.
 */
export function useWethSymbol(
  config: Omit<
    UseContractReadConfig<typeof wethABI, 'symbol'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wethABI,
    address: wethAddress,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof wethABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"allowance"`.
 */
export function useWethAllowance(
  config: Omit<
    UseContractReadConfig<typeof wethABI, 'allowance'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wethABI,
    address: wethAddress,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof wethABI, 'allowance'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wethABI}__.
 */
export function useWethWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof wethABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof wethABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof wethABI, TFunctionName>({
    abi: wethABI,
    address: wethAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"approve"`.
 */
export function useWethApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof wethABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof wethABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof wethABI, 'approve'>({
    abi: wethABI,
    address: wethAddress,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useWethTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof wethABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof wethABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof wethABI, 'transferFrom'>({
    abi: wethABI,
    address: wethAddress,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"withdraw"`.
 */
export function useWethWithdraw<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof wethABI, 'withdraw'>['abi'],
        'withdraw'
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<TMode, typeof wethABI, 'withdraw'> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof wethABI, 'withdraw'>({
    abi: wethABI,
    address: wethAddress,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"transfer"`.
 */
export function useWethTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof wethABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof wethABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof wethABI, 'transfer'>({
    abi: wethABI,
    address: wethAddress,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"deposit"`.
 */
export function useWethDeposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof wethABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof wethABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof wethABI, 'deposit'>({
    abi: wethABI,
    address: wethAddress,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wethABI}__.
 */
export function usePrepareWethWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wethABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wethABI,
    address: wethAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof wethABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareWethApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wethABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wethABI,
    address: wethAddress,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wethABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareWethTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wethABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wethABI,
    address: wethAddress,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wethABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareWethWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wethABI, 'withdraw'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wethABI,
    address: wethAddress,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wethABI, 'withdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareWethTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wethABI, 'transfer'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wethABI,
    address: wethAddress,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wethABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wethABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareWethDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wethABI, 'deposit'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wethABI,
    address: wethAddress,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wethABI, 'deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wethABI}__.
 */
export function useWethEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof wethABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: wethABI,
    address: wethAddress,
    ...config,
  } as UseContractEventConfig<typeof wethABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wethABI}__ and `eventName` set to `"Approval"`.
 */
export function useWethApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof wethABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: wethABI,
    address: wethAddress,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof wethABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wethABI}__ and `eventName` set to `"Transfer"`.
 */
export function useWethTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof wethABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: wethABI,
    address: wethAddress,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof wethABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wethABI}__ and `eventName` set to `"Deposit"`.
 */
export function useWethDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof wethABI, 'Deposit'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: wethABI,
    address: wethAddress,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof wethABI, 'Deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wethABI}__ and `eventName` set to `"Withdrawal"`.
 */
export function useWethWithdrawalEvent(
  config: Omit<
    UseContractEventConfig<typeof wethABI, 'Withdrawal'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: wethABI,
    address: wethAddress,
    eventName: 'Withdrawal',
    ...config,
  } as UseContractEventConfig<typeof wethABI, 'Withdrawal'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link priceProviderABI}__.
 */
export function usePriceProvider(
  config: Omit<UseContractConfig, 'abi' | 'address'> = {} as any,
) {
  return useContract({
    abi: priceProviderABI,
    address: priceProviderAddress,
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link priceProviderABI}__.
 */
export function usePriceProviderRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof priceProviderABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: priceProviderABI,
    address: priceProviderAddress,
    ...config,
  } as UseContractReadConfig<typeof priceProviderABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"getCurrentPrice"`.
 */
export function usePriceProviderGetCurrentPrice(
  config: Omit<
    UseContractReadConfig<typeof priceProviderABI, 'getCurrentPrice'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'getCurrentPrice',
    ...config,
  } as UseContractReadConfig<typeof priceProviderABI, 'getCurrentPrice'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"getSafePrice"`.
 */
export function usePriceProviderGetSafePrice(
  config: Omit<
    UseContractReadConfig<typeof priceProviderABI, 'getSafePrice'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'getSafePrice',
    ...config,
  } as UseContractReadConfig<typeof priceProviderABI, 'getSafePrice'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"getValueOfAsset"`.
 */
export function usePriceProviderGetValueOfAsset(
  config: Omit<
    UseContractReadConfig<typeof priceProviderABI, 'getValueOfAsset'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'getValueOfAsset',
    ...config,
  } as UseContractReadConfig<typeof priceProviderABI, 'getValueOfAsset'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"owner"`.
 */
export function usePriceProviderOwner(
  config: Omit<
    UseContractReadConfig<typeof priceProviderABI, 'owner'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof priceProviderABI, 'owner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"pairHasOracle"`.
 */
export function usePriceProviderPairHasOracle(
  config: Omit<
    UseContractReadConfig<typeof priceProviderABI, 'pairHasOracle'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'pairHasOracle',
    ...config,
  } as UseContractReadConfig<typeof priceProviderABI, 'pairHasOracle'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"priceOracle"`.
 */
export function usePriceProviderPriceOracle(
  config: Omit<
    UseContractReadConfig<typeof priceProviderABI, 'priceOracle'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'priceOracle',
    ...config,
  } as UseContractReadConfig<typeof priceProviderABI, 'priceOracle'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"tokenHasOracle"`.
 */
export function usePriceProviderTokenHasOracle(
  config: Omit<
    UseContractReadConfig<typeof priceProviderABI, 'tokenHasOracle'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'tokenHasOracle',
    ...config,
  } as UseContractReadConfig<typeof priceProviderABI, 'tokenHasOracle'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link priceProviderABI}__.
 */
export function usePriceProviderWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof priceProviderABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof priceProviderABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof priceProviderABI, TFunctionName>({
    abi: priceProviderABI,
    address: priceProviderAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePriceProviderRenounceOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof priceProviderABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof priceProviderABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof priceProviderABI, 'renounceOwnership'>({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"setTokenOracle"`.
 */
export function usePriceProviderSetTokenOracle<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof priceProviderABI,
          'setTokenOracle'
        >['abi'],
        'setTokenOracle'
      > & { functionName?: 'setTokenOracle' }
    : UseContractWriteConfig<
        TMode,
        typeof priceProviderABI,
        'setTokenOracle'
      > & {
        abi?: never
        functionName?: 'setTokenOracle'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof priceProviderABI, 'setTokenOracle'>({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'setTokenOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePriceProviderTransferOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof priceProviderABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof priceProviderABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof priceProviderABI, 'transferOwnership'>({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"updateSafePrice"`.
 */
export function usePriceProviderUpdateSafePrice<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof priceProviderABI,
          'updateSafePrice'
        >['abi'],
        'updateSafePrice'
      > & { functionName?: 'updateSafePrice' }
    : UseContractWriteConfig<
        TMode,
        typeof priceProviderABI,
        'updateSafePrice'
      > & {
        abi?: never
        functionName?: 'updateSafePrice'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof priceProviderABI, 'updateSafePrice'>({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'updateSafePrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link priceProviderABI}__.
 */
export function usePreparePriceProviderWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof priceProviderABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: priceProviderABI,
    address: priceProviderAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof priceProviderABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePreparePriceProviderRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof priceProviderABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof priceProviderABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"setTokenOracle"`.
 */
export function usePreparePriceProviderSetTokenOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof priceProviderABI, 'setTokenOracle'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'setTokenOracle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof priceProviderABI, 'setTokenOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePriceProviderTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof priceProviderABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof priceProviderABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link priceProviderABI}__ and `functionName` set to `"updateSafePrice"`.
 */
export function usePreparePriceProviderUpdateSafePrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof priceProviderABI, 'updateSafePrice'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: priceProviderABI,
    address: priceProviderAddress,
    functionName: 'updateSafePrice',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof priceProviderABI,
    'updateSafePrice'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link priceProviderABI}__.
 */
export function usePriceProviderEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof priceProviderABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: priceProviderABI,
    address: priceProviderAddress,
    ...config,
  } as UseContractEventConfig<typeof priceProviderABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link priceProviderABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePriceProviderOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof priceProviderABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: priceProviderABI,
    address: priceProviderAddress,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof priceProviderABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link priceProviderABI}__ and `eventName` set to `"SetTokenOracle"`.
 */
export function usePriceProviderSetTokenOracleEvent(
  config: Omit<
    UseContractEventConfig<typeof priceProviderABI, 'SetTokenOracle'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: priceProviderABI,
    address: priceProviderAddress,
    eventName: 'SetTokenOracle',
    ...config,
  } as UseContractEventConfig<typeof priceProviderABI, 'SetTokenOracle'>)
}
